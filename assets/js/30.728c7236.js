(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{318:function(a,t,e){"use strict";e.r(t);var n=e(14),v=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"jmx入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmx入门"}},[a._v("#")]),a._v(" JMX入门")]),a._v(" "),t("blockquote",[t("p",[a._v("部分内容翻译自https://docs.oracle.com/javase/tutorial/jmx/overview/index.html")])]),a._v(" "),t("h2",{attrs:{id:"什么是jmx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是jmx"}},[a._v("#")]),a._v(" 什么是JMX")]),a._v(" "),t("p",[a._v("Java Management Extensions (JMX) 技术是Java SE platform的一项标准技术。JMX，顾名思义是Java应用管理的扩展。其提供了一个简单标准的方式用来管理应用、设备和服务。JMX技术是动态的，可以用来监控和管理资源，也可以用来监控和管理JVM。")]),a._v(" "),t("p",[a._v("JMX技术中，一个给定的资源被称为MBean（Managed Bean），MBean也是一个Java对象，这些MBean被注册到对象的中央管理器中，并且可以有多个服务来处理MBean。这样JMX的Agent就可以直接控制资源，并且让其被远程管理的应用所管控。")]),a._v(" "),t("p",[a._v("JMX资源的创建方式是完全独立于注册管理的，因此不管管理应用的实现是什么，资源都可以正常的注册和被管理。而这接口是独立的。")]),a._v(" "),t("p",[a._v("JMX提供了标准的接口（JMX Connector）来让你从远程管理系统中访问JMX。JXM Connectors的接口是统一的，可以使用不同的协议来实现。远程的管理系统也\n可以忽略协议的实现，来轻松地对JMX进行管理。")]),a._v(" "),t("h2",{attrs:{id:"jmx的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmx的优点"}},[a._v("#")]),a._v(" JMX的优点")]),a._v(" "),t("ul",[t("li",[a._v("为Java应用程序管理提供了轻量化的开发方式。")]),a._v(" "),t("li",[a._v("为管理Java应用、系统和网络提供了标准化的方式。")]),a._v(" "),t("li",[a._v("开箱即用地管理JVM进程。")]),a._v(" "),t("li",[a._v("JMX技术提供了可扩展的，动态的管理框架。")]),a._v(" "),t("li",[a._v("JMX影响着现有的标准Java技术。例如JNDI API。")]),a._v(" "),t("li",[a._v("基于JMX的应用程序可以通过NetBeans IDE进行创建。")]),a._v(" "),t("li",[a._v("JMX集成了现有的管理方案以及技术。")])]),a._v(" "),t("h2",{attrs:{id:"jmx的架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmx的架构"}},[a._v("#")]),a._v(" JMX的架构")]),a._v(" "),t("p",[a._v("JMX技术架构分为三层：")]),a._v(" "),t("ul",[t("li",[a._v("Instrumentation")]),a._v(" "),t("li",[a._v("JMX Agent")]),a._v(" "),t("li",[a._v("Remote Management")])]),a._v(" "),t("h3",{attrs:{id:"instrumentation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#instrumentation"}},[a._v("#")]),a._v(" Instrumentation")]),a._v(" "),t("p",[a._v("这一层指JMX需要通过标准化的方式将资源注册起来。JMX使用叫MBean的对象来实现对于资源的管控。在后文会做进一步介绍。")]),a._v(" "),t("h3",{attrs:{id:"jmx-agent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmx-agent"}},[a._v("#")]),a._v(" JMX Agent")]),a._v(" "),t("p",[a._v("JMX提供了标准的代理来直接控制JMX的资源，并让资源可以被远程管理进程获取。JMX Agent的核心组件叫MBean Server，其主要作用在于管理注册了的MBean。\nJMX Agent还包含一系列MBean的管理服务，以及至少一个connector来对接远程服务。JMX Agents通常都是和MBeans在同一个jvm里，但这也不是必须的。")]),a._v(" "),t("p",[a._v("Agent的是完全独立的，也就是说Agent既不需要知道它到底要监控哪些MBean，也不需要知道哪些远程应用回来监控当前服务。这一切都得益于JMX的接口隔离。")]),a._v(" "),t("h3",{attrs:{id:"remote-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remote-management"}},[a._v("#")]),a._v(" Remote Management")]),a._v(" "),t("p",[a._v("JMX暴露给远程管理的接口（interface）和协议（protocol）是分离的。这意味着你可以通过不同的协议来暴露MBean。例如HTML Adapter可以允许你\n在浏览器上浏览MBean。")]),a._v(" "),t("p",[a._v("JMX提供的标准方式是使用Java Remote Method Invocation（RMI）的方式。")])])}),[],!1,null,null,null);t.default=v.exports}}]);